!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AbstractCar	bridge/bridge/AbstractCar.java	/^public abstract class AbstractCar {$/;"	c
AbstractFactory	abstractFactory/abstractFactory/AbstractFactory.java	/^public interface AbstractFactory {$/;"	i
AbstractFather	template/template/AbstractFather.java	/^public class AbstractFather {$/;"	c
AbstractRoad	bridge/bridge/AbstractRoad.java	/^public abstract class AbstractRoad {$/;"	c
Aggregate	iterator/iterator/Aggregate.java	/^public abstract class Aggregate {$/;"	c
AggregateImp	iterator/iterator/AggregateImp.java	/^    public AggregateImp(Object[] objects){$/;"	m	class:AggregateImp
AggregateImp	iterator/iterator/AggregateImp.java	/^public class AggregateImp extends Aggregate {$/;"	c
Alibaba	adapter/adapter/Alibaba.java	/^public class Alibaba {$/;"	c
Ant	Builder/builder/Ant.java	/^public class Ant {$/;"	c
Baidu	adapter/adapter/Baidu.java	/^public interface Baidu {$/;"	i
Baidu	facade/facade/Baidu.java	/^public interface Baidu {$/;"	i
BaiduImp	adapter/adapter/BaiduImp.java	/^public class BaiduImp extends Alibaba implements Baidu {$/;"	c
BaiduImp	facade/facade/BaiduImp.java	/^public class BaiduImp implements Baidu {$/;"	c
Builder	Builder/builder/Builder.java	/^public interface Builder {$/;"	i
BuilderImp	Builder/builder/BuilderImp.java	/^public class BuilderImp implements Builder {$/;"	c
Button	abstractFactory/abstractFactory/Button.java	/^public interface Button {$/;"	i
ButtonImpl	abstractFactory/abstractFactory/impl/ButtonImpl.java	/^public class ButtonImpl implements Button {$/;"	c
Car	bridge/bridge/Car.java	/^public class Car extends AbstractCar {$/;"	c
Car	simpleFactory/simpleFactory/Car.java	/^public interface Car {$/;"	i
CarFactory	simpleFactory/simpleFactory/CarFactory.java	/^public interface CarFactory {$/;"	i
CarFactoryImpl	simpleFactory/simpleFactory/CarFactoryImpl.java	/^public class CarFactoryImpl implements CarFactory{$/;"	c
Caretaker	memento/memento/Caretaker.java	/^public class Caretaker {$/;"	c
Change	decorate/decorate/Change.java	/^    public Change(Decorate decorate){$/;"	m	class:Change
Change	decorate/decorate/Change.java	/^public class Change implements Decorate{$/;"	c
ChangeOne	decorate/decorate/ChangeOne.java	/^    public ChangeOne(Decorate decorate) {$/;"	m	class:ChangeOne
ChangeOne	decorate/decorate/ChangeOne.java	/^public class ChangeOne extends Change {$/;"	c
ChangeTwo	decorate/decorate/ChangeTwo.java	/^    public ChangeTwo(Decorate decorate) {$/;"	m	class:ChangeTwo
ChangeTwo	decorate/decorate/ChangeTwo.java	/^public class ChangeTwo extends Change {$/;"	c
Command	command/command/Command.java	/^public interface Command {$/;"	i
Component	composite/composite/Component.java	/^    public Component(String msg){$/;"	m	class:Component
Component	composite/composite/Component.java	/^public abstract class Component {$/;"	c
Composite	composite/composite/Composite.java	/^    public Composite(String msg) {$/;"	m	class:Composite
Composite	composite/composite/Composite.java	/^public class Composite extends Component {$/;"	c
Computer	facade/facade/Computer.java	/^public interface Computer {$/;"	i
ComputerImp	facade/facade/ComputerImp.java	/^public class ComputerImp implements Computer {$/;"	c
ConcreteFlyweight	flyweight/flyweight/ConcreteFlyweight.java	/^    public ConcreteFlyweight(String in){$/;"	m	class:ConcreteFlyweight
ConcreteFlyweight	flyweight/flyweight/ConcreteFlyweight.java	/^public class ConcreteFlyweight implements Flyweight{$/;"	c
ConcreteHandler	handler/handler/ConcreteHandler.java	/^public class ConcreteHandler extends Handler {$/;"	c
ConcreteState1	state/state/ConcreteState1.java	/^public class ConcreteState1 implements State {$/;"	c
ConcreteState2	state/state/ConcreteState2.java	/^public class ConcreteState2 implements State {$/;"	c
Context	state/state/Context.java	/^public class Context {$/;"	c
Context	strategy/strategy/Context.java	/^    public Context(Strategy strategy){$/;"	m	class:Context
Context	strategy/strategy/Context.java	/^public class Context {$/;"	c
Decorate	decorate/decorate/Decorate.java	/^public interface Decorate {$/;"	i
DecorateObject	decorate/decorate/DecorateObject.java	/^public class DecorateObject implements Decorate {$/;"	c
Director	Builder/builder/Director.java	/^    public Director(Builder builder){$/;"	m	class:Director
Director	Builder/builder/Director.java	/^public class Director {$/;"	c
Eat	command/command/Eat.java	/^    public Eat(Lzh lzh){$/;"	m	class:Eat
Eat	command/command/Eat.java	/^public class Eat implements Command {$/;"	c
Eat	strategy/strategy/Eat.java	/^public class Eat implements Strategy {$/;"	c
FactoryImpl	abstractFactory/abstractFactory/impl/FactoryImpl.java	/^    public FactoryImpl(){$/;"	m	class:FactoryImpl
FactoryImpl	abstractFactory/abstractFactory/impl/FactoryImpl.java	/^public class FactoryImpl implements AbstractFactory{$/;"	c
Ferrari	simpleFactory/simpleFactory/Ferrari.java	/^public class Ferrari implements Car {$/;"	c
Flyweight	flyweight/flyweight/Flyweight.java	/^public interface Flyweight {$/;"	i
FlyweightFactory	flyweight/flyweight/FlyweightFactory.java	/^public class FlyweightFactory {$/;"	c
HUNGRY_SIMGLETON	simgleton/simgleton/HungrySimgleton.java	/^    private static final HungrySimgleton HUNGRY_SIMGLETON = new HungrySimgleton();$/;"	f	class:HungrySimgleton	file:
Handler	handler/handler/Handler.java	/^public abstract class Handler {$/;"	c
HungrySimgleton	simgleton/simgleton/HungrySimgleton.java	/^    private HungrySimgleton(){$/;"	m	class:HungrySimgleton	file:
HungrySimgleton	simgleton/simgleton/HungrySimgleton.java	/^public class HungrySimgleton {$/;"	c
Iterator	iterator/iterator/Iterator.java	/^public interface Iterator {$/;"	i
IteratorImp	iterator/iterator/IteratorImp.java	/^    public IteratorImp(AggregateImp aggregateImp){$/;"	m	class:IteratorImp
IteratorImp	iterator/iterator/IteratorImp.java	/^public class IteratorImp implements Iterator {$/;"	c
LZH_1	template/template/LZH_1.java	/^public class LZH_1 extends AbstractFather {$/;"	c
LZH_2	template/template/LZH_2.java	/^public class LZH_2 extends AbstractFather {$/;"	c
LazySimgleton	simgleton/simgleton/LazySimgleton.java	/^    private LazySimgleton(){}$/;"	m	class:LazySimgleton	file:
LazySimgleton	simgleton/simgleton/LazySimgleton.java	/^public class LazySimgleton {$/;"	c
Lzh	command/command/Lzh.java	/^public  class Lzh {$/;"	c
Memento	memento/memento/Memento.java	/^    public Memento(String msg){$/;"	m	class:Memento
Memento	memento/memento/Memento.java	/^public class Memento {$/;"	c
Observer	observer/observer/Observer.java	/^public interface Observer {$/;"	i
ObserverImp	observer/observer/ObserverImp.java	/^public class ObserverImp implements Observer{$/;"	c
Originator	memento/memento/Originator.java	/^public class Originator {$/;"	c
Panel	abstractFactory/abstractFactory/Panel.java	/^public interface Panel {$/;"	i
PanelImpl	abstractFactory/abstractFactory/impl/PanelImpl.java	/^public class PanelImpl implements Panel {$/;"	c
Part	composite/composite/Part.java	/^    public Part(String msg) {$/;"	m	class:Part
Part	composite/composite/Part.java	/^public class Part extends Component {$/;"	c
Person	proxy/proxy/Person.java	/^public interface Person {$/;"	i
Prototype	Prototype/prototype/Prototype.java	/^public class Prototype implements Cloneable {$/;"	c
PrototypeSub	Prototype/prototype/PrototypeSub.java	/^public class PrototypeSub extends Prototype {$/;"	c
Proxy	proxy/proxy/Proxy.java	/^public class Proxy implements Person {$/;"	c
Real	proxy/proxy/Real.java	/^public class Real implements Person {$/;"	c
RollsRoyce	simpleFactory/simpleFactory/RollsRoyce.java	/^public class RollsRoyce implements Car {$/;"	c
Say	strategy/strategy/Say.java	/^public class Say implements Strategy {$/;"	c
Search	facade/facade/Search.java	/^public interface Search {$/;"	i
SearchImp	facade/facade/SearchImp.java	/^public class SearchImp implements Search {$/;"	c
Sleep	command/command/Sleep.java	/^    public Sleep(Lzh lzh){$/;"	m	class:Sleep
Sleep	command/command/Sleep.java	/^public class Sleep implements Command {$/;"	c
State	state/state/State.java	/^public interface State {$/;"	i
Strategy	strategy/strategy/Strategy.java	/^public interface Strategy {$/;"	i
Street	bridge/bridge/Street.java	/^public class Street extends AbstractRoad {$/;"	c
Subject	observer/observer/Subject.java	/^public interface Subject {$/;"	i
SubjectImp	observer/observer/SubjectImp.java	/^public class SubjectImp implements Subject {$/;"	c
Test	Builder/builder/test/Test.java	/^public class Test {$/;"	c
Test	Prototype/prototype/test/Test.java	/^public class Test {$/;"	c
Test	abstractFactory/abstractFactory/test/Test.java	/^public class Test {$/;"	c
Test	adapter/adapter/test/Test.java	/^public class Test {$/;"	c
Test	bridge/bridge/test/Test.java	/^public class Test {$/;"	c
Test	command/command/test/Test.java	/^public class Test {$/;"	c
Test	composite/composite/test/Test.java	/^public class Test {$/;"	c
Test	decorate/decorate/test/Test.java	/^public class Test {$/;"	c
Test	facade/facade/test/Test.java	/^public class Test {$/;"	c
Test	flyweight/flyweight/test/Test.java	/^public class Test {$/;"	c
Test	handler/handler/test/Test.java	/^public class Test {$/;"	c
Test	iterator/iterator/test/Test.java	/^public class Test {$/;"	c
Test	memento/memento/test/Test.java	/^public class Test {$/;"	c
Test	observer/observer/test/Test.java	/^public class Test {$/;"	c
Test	proxy/proxy/test/Test.java	/^public class Test {$/;"	c
Test	simgleton/simgleton/test/Test.java	/^public class Test {$/;"	c
Test	simpleFactory/simpleFactory/test/Test.java	/^public class Test {$/;"	c
Test	state/state/test/Test.java	/^public class Test {$/;"	c
Test	strategy/strategy/test/Test.java	/^public class Test {$/;"	c
Test	template/template/Test.java	/^public class Test {$/;"	c
Test	visitor/visitor/Test.java	/^public class Test {$/;"	c
Walk	command/command/Walk.java	/^    public Walk(Lzh lzh){$/;"	m	class:Walk
Walk	command/command/Walk.java	/^public class Walk implements Command {$/;"	c
Walk	strategy/strategy/Walk.java	/^public class Walk implements Strategy {$/;"	c
abstractFactory	abstractFactory/abstractFactory/AbstractFactory.java	/^package abstractFactory;$/;"	p
abstractFactory	abstractFactory/abstractFactory/Button.java	/^package abstractFactory;$/;"	p
abstractFactory	abstractFactory/abstractFactory/Panel.java	/^package abstractFactory;$/;"	p
abstractFactory.impl	abstractFactory/abstractFactory/impl/ButtonImpl.java	/^package abstractFactory.impl;$/;"	p
abstractFactory.impl	abstractFactory/abstractFactory/impl/FactoryImpl.java	/^package abstractFactory.impl;$/;"	p
abstractFactory.impl	abstractFactory/abstractFactory/impl/PanelImpl.java	/^package abstractFactory.impl;$/;"	p
abstractFactory.test	abstractFactory/abstractFactory/test/Test.java	/^package abstractFactory.test;$/;"	p
act	decorate/decorate/Change.java	/^    public void act() {$/;"	m	class:Change
act	decorate/decorate/ChangeOne.java	/^    public void act() {$/;"	m	class:ChangeOne
act	decorate/decorate/ChangeTwo.java	/^    public void act() {$/;"	m	class:ChangeTwo
act	decorate/decorate/Decorate.java	/^    void act();$/;"	m	interface:Decorate
act	decorate/decorate/DecorateObject.java	/^    public void act() {$/;"	m	class:DecorateObject
action	strategy/strategy/Context.java	/^    public void action(){$/;"	m	class:Context
adapter	adapter/adapter/Alibaba.java	/^package adapter;$/;"	p
adapter	adapter/adapter/Baidu.java	/^package adapter;$/;"	p
adapter	adapter/adapter/BaiduImp.java	/^package adapter;$/;"	p
adapter.test	adapter/adapter/test/Test.java	/^package adapter.test;$/;"	p
add	composite/composite/Component.java	/^    public void add(Component component){$/;"	m	class:Component
add	composite/composite/Composite.java	/^    public void add(Component component) {$/;"	m	class:Composite
addObserver	observer/observer/Subject.java	/^    void addObserver(Observer observer);$/;"	m	interface:Subject
addObserver	observer/observer/SubjectImp.java	/^    public void addObserver(Observer observer) {$/;"	m	class:SubjectImp
aggregateImp	iterator/iterator/IteratorImp.java	/^    private AggregateImp aggregateImp = null;$/;"	f	class:IteratorImp	file:
ant	Builder/builder/BuilderImp.java	/^    private Ant ant = new Ant();$/;"	f	class:BuilderImp	file:
body	Builder/builder/Ant.java	/^    private String body;$/;"	f	class:Ant	file:
bridge	bridge/bridge/AbstractCar.java	/^package bridge;$/;"	p
bridge	bridge/bridge/AbstractRoad.java	/^package bridge;$/;"	p
bridge	bridge/bridge/Car.java	/^package bridge;$/;"	p
bridge	bridge/bridge/Street.java	/^package bridge;$/;"	p
bridge.test	bridge/bridge/test/Test.java	/^package bridge.test;$/;"	p
buildAnt	Builder/builder/Director.java	/^    public Ant buildAnt(){$/;"	m	class:Director
buildBody	Builder/builder/Builder.java	/^    void buildBody();$/;"	m	interface:Builder
buildBody	Builder/builder/BuilderImp.java	/^    public void buildBody() {$/;"	m	class:BuilderImp
buildHead	Builder/builder/Builder.java	/^    void buildHead();$/;"	m	interface:Builder
buildHead	Builder/builder/BuilderImp.java	/^    public void buildHead() {$/;"	m	class:BuilderImp
buildTail	Builder/builder/Builder.java	/^    void buildTail();$/;"	m	interface:Builder
buildTail	Builder/builder/BuilderImp.java	/^    public void buildTail() {$/;"	m	class:BuilderImp
builder	Builder/builder/Ant.java	/^package builder;$/;"	p
builder	Builder/builder/Builder.java	/^package builder;$/;"	p
builder	Builder/builder/BuilderImp.java	/^package builder;$/;"	p
builder	Builder/builder/Director.java	/^    private Builder builder;$/;"	f	class:Director	file:
builder	Builder/builder/Director.java	/^package builder;$/;"	p
builder.test	Builder/builder/test/Test.java	/^package builder.test;$/;"	p
button	abstractFactory/abstractFactory/impl/FactoryImpl.java	/^    private Button button = null;$/;"	f	class:FactoryImpl	file:
car	bridge/bridge/AbstractRoad.java	/^    private AbstractCar car = null;$/;"	f	class:AbstractRoad	file:
car	simpleFactory/simpleFactory/CarFactoryImpl.java	/^    private Car car;$/;"	f	class:CarFactoryImpl	file:
clone	Prototype/prototype/Prototype.java	/^    public Prototype clone() throws CloneNotSupportedException {$/;"	m	class:Prototype
color	simpleFactory/simpleFactory/Car.java	/^    String color();$/;"	m	interface:Car
color	simpleFactory/simpleFactory/Ferrari.java	/^    public String color() {$/;"	m	class:Ferrari
color	simpleFactory/simpleFactory/RollsRoyce.java	/^    public String color() {$/;"	m	class:RollsRoyce
command	command/command/Command.java	/^package command;$/;"	p
command	command/command/Eat.java	/^package command;$/;"	p
command	command/command/Lzh.java	/^package command;$/;"	p
command	command/command/Sleep.java	/^package command;$/;"	p
command	command/command/Walk.java	/^package command;$/;"	p
command.test	command/command/test/Test.java	/^package command.test;$/;"	p
components	composite/composite/Composite.java	/^    private ArrayList<Component> components = new ArrayList<>();$/;"	f	class:Composite	file:
composite	composite/composite/Component.java	/^package composite;$/;"	p
composite	composite/composite/Composite.java	/^package composite;$/;"	p
composite	composite/composite/Part.java	/^package composite;$/;"	p
composite.test	composite/composite/test/Test.java	/^package composite.test;$/;"	p
computerShutdown	facade/facade/Baidu.java	/^    void computerShutdown();$/;"	m	interface:Baidu
computerShutdown	facade/facade/BaiduImp.java	/^    public void computerShutdown() {$/;"	m	class:BaiduImp
createIterator	iterator/iterator/Aggregate.java	/^    public abstract Iterator createIterator();$/;"	m	class:Aggregate
createIterator	iterator/iterator/AggregateImp.java	/^    public Iterator createIterator() {$/;"	m	class:AggregateImp
createMemento	memento/memento/Originator.java	/^    public Memento createMemento(String msg){$/;"	m	class:Originator
current	iterator/iterator/Iterator.java	/^    Object current();$/;"	m	interface:Iterator
current	iterator/iterator/IteratorImp.java	/^    public Object current() {$/;"	m	class:IteratorImp
decorate	decorate/decorate/Change.java	/^    private Decorate decorate;$/;"	f	class:Change	file:
decorate	decorate/decorate/Change.java	/^package decorate;$/;"	p
decorate	decorate/decorate/ChangeOne.java	/^package decorate;$/;"	p
decorate	decorate/decorate/ChangeTwo.java	/^package decorate;$/;"	p
decorate	decorate/decorate/Decorate.java	/^package decorate;$/;"	p
decorate	decorate/decorate/DecorateObject.java	/^package decorate;$/;"	p
decorate.test	decorate/decorate/test/Test.java	/^package decorate.test;$/;"	p
doSomething	strategy/strategy/Eat.java	/^    public void doSomething() {$/;"	m	class:Eat
doSomething	strategy/strategy/Say.java	/^    public void doSomething() {$/;"	m	class:Say
doSomething	strategy/strategy/Strategy.java	/^    void doSomething();$/;"	m	interface:Strategy
doSomething	strategy/strategy/Walk.java	/^    public void doSomething() {$/;"	m	class:Walk
eat	command/command/Lzh.java	/^    public void eat(){$/;"	m	class:Lzh
eat	template/template/AbstractFather.java	/^    public void eat(){}$/;"	m	class:AbstractFather
eat	template/template/LZH_2.java	/^    public void eat() {$/;"	m	class:LZH_2
execute	command/command/Command.java	/^    void execute();$/;"	m	interface:Command
execute	command/command/Eat.java	/^    public void execute() {$/;"	m	class:Eat
execute	command/command/Sleep.java	/^    public void execute() {$/;"	m	class:Sleep
execute	command/command/Walk.java	/^    public void execute() {$/;"	m	class:Walk
facade	facade/facade/Baidu.java	/^package facade;$/;"	p
facade	facade/facade/BaiduImp.java	/^package facade;$/;"	p
facade	facade/facade/Computer.java	/^package facade;$/;"	p
facade	facade/facade/ComputerImp.java	/^package facade;$/;"	p
facade	facade/facade/Search.java	/^package facade;$/;"	p
facade	facade/facade/SearchImp.java	/^package facade;$/;"	p
facade.test	facade/facade/test/Test.java	/^package facade.test;$/;"	p
factory	flyweight/flyweight/FlyweightFactory.java	/^    public static Flyweight factory(String in){$/;"	m	class:FlyweightFactory
first	iterator/iterator/Iterator.java	/^    void first();$/;"	m	interface:Iterator
first	iterator/iterator/IteratorImp.java	/^    public void first() {$/;"	m	class:IteratorImp
flyweight	flyweight/flyweight/ConcreteFlyweight.java	/^package flyweight;$/;"	p
flyweight	flyweight/flyweight/Flyweight.java	/^package flyweight;$/;"	p
flyweight	flyweight/flyweight/FlyweightFactory.java	/^package flyweight;$/;"	p
flyweight.test	flyweight/flyweight/test/Test.java	/^package flyweight.test;$/;"	p
flyweights	flyweight/flyweight/FlyweightFactory.java	/^    private static Hashtable<String,Flyweight> flyweights = new Hashtable<>();$/;"	f	class:FlyweightFactory	file:
getBody	Builder/builder/Ant.java	/^    public String getBody() {$/;"	m	class:Ant
getCar	bridge/bridge/AbstractRoad.java	/^    public AbstractCar getCar() {$/;"	m	class:AbstractRoad
getCar	simpleFactory/simpleFactory/CarFactory.java	/^    Car getCar(Class<? extends Car> clasz);$/;"	m	interface:CarFactory
getCar	simpleFactory/simpleFactory/CarFactoryImpl.java	/^    public Car getCar(Class<? extends Car> clasz){$/;"	m	class:CarFactoryImpl
getElement	iterator/iterator/AggregateImp.java	/^    public Object getElement(int index){$/;"	m	class:AggregateImp
getHandler	handler/handler/Handler.java	/^    public Handler getHandler() {$/;"	m	class:Handler
getHead	Builder/builder/Ant.java	/^    public String getHead() {$/;"	m	class:Ant
getInstance	simgleton/simgleton/HungrySimgleton.java	/^    public static final HungrySimgleton getInstance(){$/;"	m	class:HungrySimgleton
getInstance	simgleton/simgleton/LazySimgleton.java	/^    public static LazySimgleton getInstance(){$/;"	m	class:LazySimgleton
getMemento	memento/memento/Caretaker.java	/^    public Memento getMemento() {$/;"	m	class:Caretaker
getMsg	memento/memento/Memento.java	/^    public String getMsg(){$/;"	m	class:Memento
getMsg	memento/memento/Originator.java	/^    public String getMsg() {$/;"	m	class:Originator
getProduct	Builder/builder/Builder.java	/^    Ant getProduct();$/;"	m	interface:Builder
getProduct	Builder/builder/BuilderImp.java	/^    public Ant getProduct() {$/;"	m	class:BuilderImp
getSize	iterator/iterator/AggregateImp.java	/^    public int getSize(){$/;"	m	class:AggregateImp
getTail	Builder/builder/Ant.java	/^    public String getTail() {$/;"	m	class:Ant
handle	state/state/ConcreteState1.java	/^    public void handle(String handle) {$/;"	m	class:ConcreteState1
handle	state/state/ConcreteState2.java	/^    public void handle(String handle) {$/;"	m	class:ConcreteState2
handle	state/state/Context.java	/^    public void handle(String handle){$/;"	m	class:Context
handle	state/state/State.java	/^    void handle(String handle);$/;"	m	interface:State
handler	handler/handler/ConcreteHandler.java	/^package handler;$/;"	p
handler	handler/handler/Handler.java	/^    private Handler handler;$/;"	f	class:Handler	file:
handler	handler/handler/Handler.java	/^package handler;$/;"	p
handler.test	handler/handler/test/Test.java	/^package handler.test;$/;"	p
head	Builder/builder/Ant.java	/^    private String head;$/;"	f	class:Ant	file:
in	flyweight/flyweight/ConcreteFlyweight.java	/^    String in;$/;"	f	class:ConcreteFlyweight
index	iterator/iterator/IteratorImp.java	/^    private int index = 0;$/;"	f	class:IteratorImp	file:
isLast	iterator/iterator/Iterator.java	/^    boolean isLast();$/;"	m	interface:Iterator
isLast	iterator/iterator/IteratorImp.java	/^    public boolean isLast() {$/;"	m	class:IteratorImp
iterator	iterator/iterator/Aggregate.java	/^package iterator;$/;"	p
iterator	iterator/iterator/AggregateImp.java	/^package iterator;$/;"	p
iterator	iterator/iterator/Iterator.java	/^package iterator;$/;"	p
iterator	iterator/iterator/IteratorImp.java	/^package iterator;$/;"	p
iterator.test	iterator/iterator/test/Test.java	/^package iterator.test;$/;"	p
lazySimgleton	simgleton/simgleton/LazySimgleton.java	/^    private static LazySimgleton lazySimgleton = null;$/;"	f	class:LazySimgleton	file:
linux	abstractFactory/abstractFactory/AbstractFactory.java	/^    void linux();$/;"	m	interface:AbstractFactory
linux	abstractFactory/abstractFactory/impl/FactoryImpl.java	/^    public void linux() {$/;"	m	class:FactoryImpl
linuxButton	abstractFactory/abstractFactory/Button.java	/^    String linuxButton();$/;"	m	interface:Button
linuxButton	abstractFactory/abstractFactory/impl/ButtonImpl.java	/^    public String linuxButton() {$/;"	m	class:ButtonImpl
linuxPanel	abstractFactory/abstractFactory/Panel.java	/^    String linuxPanel();$/;"	m	interface:Panel
linuxPanel	abstractFactory/abstractFactory/impl/PanelImpl.java	/^    public String linuxPanel() {$/;"	m	class:PanelImpl
liyanhong	adapter/adapter/Baidu.java	/^    void liyanhong();$/;"	m	interface:Baidu
liyanhong	adapter/adapter/BaiduImp.java	/^    public void liyanhong() {$/;"	m	class:BaiduImp
lzh	command/command/Eat.java	/^    private Lzh lzh;$/;"	f	class:Eat	file:
lzh	command/command/Sleep.java	/^    private Lzh lzh;$/;"	f	class:Sleep	file:
lzh	command/command/Walk.java	/^    private Lzh lzh;$/;"	f	class:Walk	file:
main	Builder/builder/test/Test.java	/^    public static void main(String[] args) {$/;"	m	class:Test
main	Prototype/prototype/test/Test.java	/^    public static void main(String[] args) {$/;"	m	class:Test
main	abstractFactory/abstractFactory/test/Test.java	/^    public static void main(String[] args) {$/;"	m	class:Test
main	adapter/adapter/test/Test.java	/^    public static void main(String[] args) {$/;"	m	class:Test
main	bridge/bridge/test/Test.java	/^    public static void main(String[] args) {$/;"	m	class:Test
main	command/command/test/Test.java	/^    public static void main(String[] args) {$/;"	m	class:Test
main	composite/composite/test/Test.java	/^    public static void main(String[] args) {$/;"	m	class:Test
main	decorate/decorate/test/Test.java	/^    public static void main(String[] args) {$/;"	m	class:Test
main	facade/facade/test/Test.java	/^    public static void main(String[] args) {$/;"	m	class:Test
main	flyweight/flyweight/test/Test.java	/^    public static void main(String[] args) {$/;"	m	class:Test
main	handler/handler/test/Test.java	/^    public static void main(String[] args) {$/;"	m	class:Test
main	iterator/iterator/test/Test.java	/^    public static void main(String[] args) {$/;"	m	class:Test
main	memento/memento/test/Test.java	/^    public static void main(String[] args) {$/;"	m	class:Test
main	observer/observer/test/Test.java	/^    public static void main(String[] args) {$/;"	m	class:Test
main	proxy/proxy/test/Test.java	/^    public static void main(String[] args) {$/;"	m	class:Test
main	simgleton/simgleton/test/Test.java	/^    public static void main(String[] args) {$/;"	m	class:Test
main	simpleFactory/simpleFactory/test/Test.java	/^    public static void main(String[] args) {$/;"	m	class:Test
main	state/state/test/Test.java	/^    public static void main(String[] args) {$/;"	m	class:Test
main	strategy/strategy/test/Test.java	/^    public static void main(String[] args) {$/;"	m	class:Test
main	template/template/Test.java	/^    public static void main(String[] args) {$/;"	m	class:Test
main	visitor/visitor/Test.java	/^    public static void main(String[] args) {$/;"	m	class:Test
mayun	adapter/adapter/Alibaba.java	/^    public void mayun(){$/;"	m	class:Alibaba
memento	memento/memento/Caretaker.java	/^    private Memento memento;$/;"	f	class:Caretaker	file:
memento	memento/memento/Caretaker.java	/^package memento;$/;"	p
memento	memento/memento/Memento.java	/^package memento;$/;"	p
memento	memento/memento/Originator.java	/^package memento;$/;"	p
memento.test	memento/memento/test/Test.java	/^package memento.test;$/;"	p
msg	composite/composite/Component.java	/^    String msg;$/;"	f	class:Component
msg	memento/memento/Memento.java	/^    private String msg;$/;"	f	class:Memento	file:
msg	memento/memento/Originator.java	/^    private String msg;$/;"	f	class:Originator	file:
name	Prototype/prototype/PrototypeSub.java	/^    private String name;$/;"	f	class:PrototypeSub	file:
name	simpleFactory/simpleFactory/Car.java	/^    String name();$/;"	m	interface:Car
name	simpleFactory/simpleFactory/Ferrari.java	/^    public String name() {$/;"	m	class:Ferrari
name	simpleFactory/simpleFactory/RollsRoyce.java	/^    public String name() {$/;"	m	class:RollsRoyce
next	iterator/iterator/Iterator.java	/^    void next();$/;"	m	interface:Iterator
next	iterator/iterator/IteratorImp.java	/^    public void next() {$/;"	m	class:IteratorImp
objects	iterator/iterator/AggregateImp.java	/^    private Object[] objects = null;$/;"	f	class:AggregateImp	file:
observer	observer/observer/Observer.java	/^package observer;$/;"	p
observer	observer/observer/ObserverImp.java	/^package observer;$/;"	p
observer	observer/observer/Subject.java	/^package observer;$/;"	p
observer	observer/observer/SubjectImp.java	/^package observer;$/;"	p
observer.test	observer/observer/test/Test.java	/^package observer.test;$/;"	p
observers	observer/observer/SubjectImp.java	/^    private ArrayList<Observer> observers = new ArrayList<>();$/;"	f	class:SubjectImp	file:
panel	abstractFactory/abstractFactory/impl/FactoryImpl.java	/^    private Panel panel = null;$/;"	f	class:FactoryImpl	file:
pay	simpleFactory/simpleFactory/Car.java	/^    int pay();$/;"	m	interface:Car
pay	simpleFactory/simpleFactory/Ferrari.java	/^    public int pay() {$/;"	m	class:Ferrari
pay	simpleFactory/simpleFactory/RollsRoyce.java	/^    public int pay() {$/;"	m	class:RollsRoyce
person	proxy/proxy/Proxy.java	/^    private Person person;$/;"	f	class:Proxy	file:
printAll	composite/composite/Component.java	/^    public void printAll(){$/;"	m	class:Component
printAll	composite/composite/Composite.java	/^    public void printAll() {$/;"	m	class:Composite
prototype	Prototype/prototype/Prototype.java	/^package prototype;$/;"	p
prototype	Prototype/prototype/PrototypeSub.java	/^package prototype;$/;"	p
prototype.test	Prototype/prototype/test/Test.java	/^package prototype.test;$/;"	p
proxy	proxy/proxy/Person.java	/^package proxy;$/;"	p
proxy	proxy/proxy/Proxy.java	/^package proxy;$/;"	p
proxy	proxy/proxy/Real.java	/^package proxy;$/;"	p
proxy.test	proxy/proxy/test/Test.java	/^package proxy.test;$/;"	p
remove	composite/composite/Component.java	/^    public void remove(Component component){$/;"	m	class:Component
remove	composite/composite/Composite.java	/^    public void remove(Component component) {$/;"	m	class:Composite
removeObserver	observer/observer/Subject.java	/^    void removeObserver(Observer observer);$/;"	m	interface:Subject
removeObserver	observer/observer/SubjectImp.java	/^    public void removeObserver(Observer observer) {$/;"	m	class:SubjectImp
requestHandler	handler/handler/ConcreteHandler.java	/^    public void requestHandler() {$/;"	m	class:ConcreteHandler
requestHandler	handler/handler/Handler.java	/^    public abstract void requestHandler();$/;"	m	class:Handler
run	bridge/bridge/AbstractCar.java	/^    public abstract void run();$/;"	m	class:AbstractCar
run	bridge/bridge/AbstractRoad.java	/^    public abstract void run();$/;"	m	class:AbstractRoad
run	bridge/bridge/Car.java	/^    public void run() {$/;"	m	class:Car
run	bridge/bridge/Street.java	/^    public void run() {$/;"	m	class:Street
saveMemento	memento/memento/Caretaker.java	/^    public void saveMemento(Memento memento){$/;"	m	class:Caretaker
say	Prototype/prototype/PrototypeSub.java	/^    public void say(){$/;"	m	class:PrototypeSub
say	decorate/decorate/ChangeOne.java	/^    public void say(){$/;"	m	class:ChangeOne
say	flyweight/flyweight/ConcreteFlyweight.java	/^    public void say(String out) {$/;"	m	class:ConcreteFlyweight
say	flyweight/flyweight/Flyweight.java	/^    void say(String out);$/;"	m	interface:Flyweight
say	proxy/proxy/Person.java	/^    void say();$/;"	m	interface:Person
say	proxy/proxy/Proxy.java	/^    public void say() {$/;"	m	class:Proxy
say	proxy/proxy/Real.java	/^    public void say() {$/;"	m	class:Real
say	simgleton/simgleton/HungrySimgleton.java	/^    public void say(){$/;"	m	class:HungrySimgleton
say	simgleton/simgleton/LazySimgleton.java	/^    public void say(){$/;"	m	class:LazySimgleton
say	template/template/AbstractFather.java	/^    public void say(){}$/;"	m	class:AbstractFather
search	facade/facade/Search.java	/^    void search();$/;"	m	interface:Search
search	facade/facade/SearchImp.java	/^    public void search() {$/;"	m	class:SearchImp
searchSomething	facade/facade/Baidu.java	/^    void searchSomething();$/;"	m	interface:Baidu
searchSomething	facade/facade/BaiduImp.java	/^    public void searchSomething() {$/;"	m	class:BaiduImp
setBody	Builder/builder/Ant.java	/^    public void setBody(String body) {$/;"	m	class:Ant
setCar	bridge/bridge/AbstractRoad.java	/^    public void setCar(AbstractCar car){$/;"	m	class:AbstractRoad
setHandler	handler/handler/Handler.java	/^    public void setHandler(Handler handler) {$/;"	m	class:Handler
setHead	Builder/builder/Ant.java	/^    public void setHead(String head) {$/;"	m	class:Ant
setMsg	memento/memento/Memento.java	/^    public void setMsg(String msg) {$/;"	m	class:Memento
setMsg	memento/memento/Originator.java	/^    public void setMsg(String msg) {$/;"	m	class:Originator
setName	Prototype/prototype/PrototypeSub.java	/^    public void setName(String name){$/;"	m	class:PrototypeSub
setState	state/state/Context.java	/^    public void setState(State state) {$/;"	m	class:Context
setTail	Builder/builder/Ant.java	/^    public void setTail(String tail) {$/;"	m	class:Ant
shutdown	facade/facade/Computer.java	/^    void shutdown();$/;"	m	interface:Computer
shutdown	facade/facade/ComputerImp.java	/^    public void shutdown() {$/;"	m	class:ComputerImp
simgleton	simgleton/simgleton/HungrySimgleton.java	/^package simgleton;$/;"	p
simgleton	simgleton/simgleton/LazySimgleton.java	/^package simgleton;$/;"	p
simgleton.test	simgleton/simgleton/test/Test.java	/^package simgleton.test;$/;"	p
simpleFactory	simpleFactory/simpleFactory/Car.java	/^package simpleFactory;$/;"	p
simpleFactory	simpleFactory/simpleFactory/CarFactory.java	/^package simpleFactory;$/;"	p
simpleFactory	simpleFactory/simpleFactory/CarFactoryImpl.java	/^package simpleFactory;$/;"	p
simpleFactory	simpleFactory/simpleFactory/Ferrari.java	/^package simpleFactory;$/;"	p
simpleFactory	simpleFactory/simpleFactory/RollsRoyce.java	/^package simpleFactory;$/;"	p
simpleFactory.test	simpleFactory/simpleFactory/test/Test.java	/^package simpleFactory.test;$/;"	p
size	iterator/iterator/IteratorImp.java	/^    private int size = 0;$/;"	f	class:IteratorImp	file:
sleep	command/command/Lzh.java	/^    public void sleep(){$/;"	m	class:Lzh
sleep	template/template/AbstractFather.java	/^    public void sleep(){}$/;"	m	class:AbstractFather
sleep	template/template/LZH_1.java	/^    public void sleep() {$/;"	m	class:LZH_1
state	state/state/ConcreteState1.java	/^package state;$/;"	p
state	state/state/ConcreteState2.java	/^package state;$/;"	p
state	state/state/Context.java	/^    private State state;$/;"	f	class:Context	file:
state	state/state/Context.java	/^package state;$/;"	p
state	state/state/State.java	/^package state;$/;"	p
state.test	state/state/test/Test.java	/^package state.test;$/;"	p
strategy	strategy/strategy/Context.java	/^    private Strategy strategy;$/;"	f	class:Context	file:
strategy	strategy/strategy/Context.java	/^package strategy;$/;"	p
strategy	strategy/strategy/Eat.java	/^package strategy;$/;"	p
strategy	strategy/strategy/Say.java	/^package strategy;$/;"	p
strategy	strategy/strategy/Strategy.java	/^package strategy;$/;"	p
strategy	strategy/strategy/Walk.java	/^package strategy;$/;"	p
strategy.test	strategy/strategy/test/Test.java	/^package strategy.test;$/;"	p
tail	Builder/builder/Ant.java	/^    private String tail;$/;"	f	class:Ant	file:
template	template/template/AbstractFather.java	/^package template;$/;"	p
template	template/template/LZH_1.java	/^package template;$/;"	p
template	template/template/LZH_2.java	/^package template;$/;"	p
template	template/template/Test.java	/^package template;$/;"	p
update	observer/observer/Observer.java	/^    void update(String msg);$/;"	m	interface:Observer
update	observer/observer/ObserverImp.java	/^    public void update(String msg) {$/;"	m	class:ObserverImp
updateObserver	observer/observer/Subject.java	/^    void updateObserver(String msg);$/;"	m	interface:Subject
updateObserver	observer/observer/SubjectImp.java	/^    public void updateObserver(String msg) {$/;"	m	class:SubjectImp
visitor	visitor/visitor/Test.java	/^package visitor;$/;"	p
walk	command/command/Lzh.java	/^    public void walk(){$/;"	m	class:Lzh
walk	template/template/AbstractFather.java	/^    public void walk(){}$/;"	m	class:AbstractFather
windows	abstractFactory/abstractFactory/AbstractFactory.java	/^    void windows();$/;"	m	interface:AbstractFactory
windows	abstractFactory/abstractFactory/impl/FactoryImpl.java	/^    public void windows() {$/;"	m	class:FactoryImpl
windowsButton	abstractFactory/abstractFactory/Button.java	/^    String windowsButton();$/;"	m	interface:Button
windowsButton	abstractFactory/abstractFactory/impl/ButtonImpl.java	/^    public String windowsButton() {$/;"	m	class:ButtonImpl
windowsPanel	abstractFactory/abstractFactory/Panel.java	/^    String windowsPanel();$/;"	m	interface:Panel
windowsPanel	abstractFactory/abstractFactory/impl/PanelImpl.java	/^    public String windowsPanel() {$/;"	m	class:PanelImpl
